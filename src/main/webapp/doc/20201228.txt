System.out.println 앞으로 사용 금지
why??
하나의 프린트 내용이 완전히 프린트되거나 저장되기 전까지 다음 프린트 부분은 대기할 수 밖에 없게 되고,
애플리케이션 전체에 대기시간이 발생하게 된다.
만약에 동시접속자 수가 많게 된다면 위의 이유로 인해 서버가 터질 수가 있다.

logging 사용 이유 : 개발시 의도한대로 동작하고 있는지 검사
ex) 웹브라우저를 통해 server로 요청(localhost/basicServlet)
    doGet메소드가 호출이 되었는지 로그를 통해 확인
    파라미터가 의도한대로 서블릿으로 전달이 되었는지 확인

logging과 비슷한 목적으로 사용하는 것 : 디버깅

log level 설정에 따른 logger 메소드 동작여부?
- debug 레벨로 설정했다면 debug 위의 레벨들의 logger메소드들이 다 동작이 가능

로깅 문자열 결합을 피하기 위한 방법?
logger.debug("basicServlet.doGet userid parameter : " + req.getParameter("userid"));
=>초창기 : if(설정로그레벨 <= debug) { ==> 초창기 잡는 방법 
			logger.debug("basicServlet.doGet userid parameter : " + req.getParameter("userid"));
		  }
=>요즘 : logger.debug("basicServlet.doGet userid parameter : {} {}", req.getParameter("userid"), req.getParameter("pass"));

문자열 결합은 왜 피해야 하는지? 파라미터 생성 비용(어떤 변수를 string으로 변환하고 다른
string들과 연결)이 들지 않게 하기 위해(이런 이유때문에 서버에 과부하 걸릴 수 있음)


SLF4J(Simple Logging Facade For Java) LogBack
pom.xml에
<!-- https://mvnrepository.com/artifact/ch.qos.logback/logback-classic -->
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.3</version>
    <scope>test</scope>
</dependency>
라이브러리추가

scope
생략시(default) compile - 컴파일 과정부터 배포되는 과정까지 해당 라이브러리가 필요함을 의미
test : test과정 까지만 필요, 배포시 (packaging)시 제외됨
provided(제공이 되어짐) : 운영환경에서 해당 라이브러리가 제공이 됨(배포시 제외)

logback
appender에 따라 콘솔이나 파일에 로그를 출력할 수 있다.(logger에 appender name에
추가한 appender 이름을 쓰면됨)

logger는 패키지 계층 구조로 얻어옴 그래서 패키지의 계층 구조와 일치하는 로거 이름이
있는지 찾아 해당 로거를 사용하게 된다.
logger name="kr.or.ddit"로 지정시 해당 패키지만 로그를 볼수 있다.
         level에 따라서 필요할 때만 로그를 볼 수 있다.(logger.level)

level
trace : debug보다 상세한 정보 출력 
debug : 프로그램 디버깅 위한 정보 출력 
info : 상태변경과 같은 정보성 메세지 출력 
warn : 향후 시스템에 문제가 발생할 가능성이 있는 메세지 출력 
error : 에러 발생시(try-catch에서는 error로 설정해서 경각심!!)

만약에 log level을 debug보다 높은 레벨로 설정할 경우 로그를 생성하지는 않지만
메소드 인자인 문자열 + 문자열 ==> 문자열 결합 연산이 발생한다. 그래서
if(설정로그레벨 <= debug) {} ==> 초창기 잡는 방법 
지금은 ("{} {}", parameter1, parameter2)이런식으로 극복함

root 로거를 이용할 경우 다른 패키지 로그도 볼 수 있으므로 불필요 할 수 있다.
============================================================

servlet : java에 html코드를 삽입
		생기는 문제점
		1. html 코드들이 문자 취급되기 때문에 오타를 발견 하기가 어려움
		2. 협업의 문제점
			java - 프로그래머
			html - 디자이너
		3. 개발자가 코드를 리딩하는데 가독성의 문제
		==> jsp의 탄생 배경

jsp : html코드에 java 코드를 삽입
- 요청에 따라 동적으로 컨텐츠를 생성/전달
- jsp는 화면 구성에 사용(html안에 java코드를 사용)
- servlet .=. jsp (jsp는 servlet으로 변환됨)
- servlet은 로직 처리시에 사용 => MVC framework사용

1. jsp는 servlet으로 변환되어 서비스 된다
2. servlet-container(tomcat)이 jsp를 서블릿으로 변환하는 과정에서
   사용하는 폴더는 work 폴더
   . tomcat도 개발자가 만든 프로그램으로 비정상적으로 동작할 때가 있음
   . 개발자가 jsp파일을 수정하였음에도 수정 내역이 반영되지 않을 경우
     work 폴더에 생성된 jsp 변환 파일들(java,class)을 삭제 해주면 새롭게 만들어 준다
3. jsp를 서블릿으로 변환하는 시기는 해당 jsp에 대해 최초 요청이 일어 났을 경우에 변환
   . 서블릿으로 생성이 된 이후 같은  파일에 대한 요청은 이미 변환된 파일로 서비스
  
지시자
스크립틀릿 : java 코드 기술 ==> JSTL
표현식 : 출력 ==> EL
주석
선언부 : 변수, 메소드 선언 ==> VIEW와는 크게 관련이 없는 부분