목표 : spring환경에서 일반적인 게시판 기능을 8시간 이내 완성할 수 있는 능력

클라이언트 / 서버 아키텍쳐
1티어 - 속도가 느리다
2티어 - 전용Client프로그램 : 속도가 빠름, client간 통신이 어렵다
3티어 - 속도가 빠름(온라인 게임), server를 통해 client간 통신 가능
	client 프로그램의 배포의 문제

웹 아키텍쳐
전반적인 틀은 클라이언트/서버 아키텍처와 비슷하다
Web browser
가장 큰 차이점 : 배포 방식 웹은 server에만 배포를 한번만 하면 끝난다.
단점 : 브라우저 기능에만 의존 => 제한적인 UI
	모든 브라우저가 동일한 기능 제공하지 않고, 호환문제 

Servlet - Server program + let : 작은 서버 프로그램
Applet - Application + let : 작은 응용 프로그램

Servlet
java를 사용하여 동적 웹페이지를 생성하는 표준 스펙
HttpServlet 클래스를 상속하여 작성

Web Application Server : WAS (jboss, IBM 웹스피어)
Servlet Container + EJB Container

servlet Container[Web Container]  (tomcat)
서블릿을 관리 실행 할 수 있는 프로그램(서버) 


Maven Project
Group id : 회사의 도메인 역순으로 기술
	     해당 프로젝트를 진행하는 회사의 정보
	      ex) naver.com ⇒ com.naver
Artifact id : Group id에 해당하는 회사에서 진행하는 프로젝트 명
		ex) google : GMAIL, GOOGLE DRIVE
Version : 프로젝트의 버전
		대.중.소 : 3.5.2
Packaging
jar : Java ARchive : 클래스들을 묶어 놓은 파일, 압축파일
war : Web ARchive : 웹 프로그램을 묶어 놓은 파일
	tomcat의 webapps 폴더에 war 파일을 복사 해놓고 톰캣을 기동하면
	war 파일을 톰캣이 자동으로 압축을 해제하여 웹 어플리케이션이 서비스 되도록 한다


pom : Project Object Model - 프로젝트에 대한 설정 정보
	해당 프로젝트를 만든 회사
	프로젝트 이름
	프로젝트의 버전
	프로젝트에서 필요로 하는 의존성(dependency) - 라이브러리(ojdbc6.jar같은거)
pom.xml : 